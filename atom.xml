<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zhangxz</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-08-14T06:18:31.187Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>&lt;计算机系统结构&gt;</title>
    <link href="http://example.com/2023/08/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%BB%93%E6%9E%84/"/>
    <id>http://example.com/2023/08/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%BB%93%E6%9E%84/</id>
    <published>2023-08-03T05:23:11.813Z</published>
    <updated>2023-08-14T06:18:31.187Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CA1-概论"><a href="#CA1-概论" class="headerlink" title="CA1 概论"></a>CA1 概论</h2><h3 id="CA1-1-计算机的结构"><a href="#CA1-1-计算机的结构" class="headerlink" title="CA1.1 计算机的结构"></a>CA1.1 计算机的结构</h3><p>1946 年，美国宾夕法尼亚大学研制了世界第一台通用计算机 ENIAC（Electronic Numerical Integrator And Computer，电子数字积分计算机）。通过手动编程，使用十进制方式表示和计算信息。<br>冯·诺依曼提出了 IAS 计算机的结构，这就是 冯·诺依曼结构。这种计算机完成的工作要事先被编写为程序，然后将程序和原始数据送入主存并执行。一旦程序启动，计算机就能在不需要操作人员干预的情况下自动完成逐条取出指令和执行指令的认为。“存储程序” 是冯·诺依曼机器的最重要思想。现在，几乎所有通用计算机都采用冯·诺依曼结构</p><h4 id="冯·诺依曼结构"><a href="#冯·诺依曼结构" class="headerlink" title="#冯·诺依曼结构"></a>#冯·诺依曼结构</h4><p>冯·诺依曼结构的主要思想：<br>计算机应该由五个基本部件组成</p><pre class="line-numbers language-none"><code class="language-none">存储器：能存放数据和指令。数据和指令在形式上没有区别（0、1 的序列），但计算机能区分数据和指令控制器：能自动取出指令并执行运算器：能进行加减乘除四种基本算术运算，以及一些逻辑运算和附加运算输入设备、输出设备：操作人员通过输入、输出设备和主机进行通信<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>计算机内部以 二进制形式 表示指令和数据。每条指令分为两部分：</p><pre class="line-numbers language-none"><code class="language-none">操作码部分：指出操作类型地址吗部分：指出操作数的地址<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>一串指令组成了程序。计算机采用 存储程序 的工作方式</p><h4 id="现代计算机结构模型"><a href="#现代计算机结构模型" class="headerlink" title="#现代计算机结构模型"></a>#现代计算机结构模型</h4><p>现代计算机的基本部件：</p><pre class="line-numbers language-none"><code class="language-none">CPU：中央处理器PC：程序计数器MAR：储存器地址寄存器ALU：算术逻辑部件IR：指令寄存器MDR：存储器数据寄存器GPRs：通用寄存器组（由若干寄存器组成，早期是累加器）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现代计算机的工作过程</p><pre class="line-numbers language-none"><code class="language-none">数据和指令按顺序放在储存器中，各自对应一个存储单元地址。指令由 OP、ADDR 字段组成，程序起始地址置 PC开始执行程序后，先根据 PC 读取指令并将其译码，再根据指令读操作数，执行指令后回写结果，最后修改 PC 的值。之后会循环继续执行下一道指令计算机的指令包含以下信息：操作性质（操作码）源操作数1 和&#x2F;或 源操作数2（立即数、寄存器编号、存储地址）目的操作数地址（寄存器编号、存储地址）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="CA1-2-程序开发过程"><a href="#CA1-2-程序开发过程" class="headerlink" title="CA1.2 程序开发过程"></a>CA1.2 程序开发过程</h3><p>最早的程序开发是使用机器语言编写程序，并记录在纸带或卡片上，这是第一代程序设计语言。这样的编程方式不够灵活，书写、阅读也很困难。</p><h4 id="汇编语言"><a href="#汇编语言" class="headerlink" title="#汇编语言"></a>#汇编语言</h4><pre class="line-numbers language-none"><code class="language-none">以助记符表示操作码和寄存器，以标号表示位置，就形成了 汇编语言。汇编语言称为第二代程序设计语言汇编语言需要借助汇编程序转换才能被机器识别。汇编语言程序由汇编指令构成。汇编指令是用助记符和标号表示的，和机器指令一一对应。指令包含操作码、操作数或其地址码。机器指令用二进制表示，汇编指令用符号表示。指令只能包含最简单的数据的存取，简单计算。使用汇编语言编写复杂程序要描述的细节太多，而且在不同结构机器上无法运行。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="高级语言"><a href="#高级语言" class="headerlink" title="#高级语言"></a>#高级语言</h4><pre class="line-numbers language-none"><code class="language-none">随着技术发展，出现了很多 高级编程语言。这些语言和具体机器结构无关。它们面向算法描述，比机器语言描述能力强得多。第三代程序设计语言是过程式语言，描述 “怎么做”，编码时需要描述实现过程。第四代程序设计语言是非过程式语言，编码时只需说明 “做什么”，而不需描述具体的算法实现细节。高级语言是高度抽象的，其一条语句可能对应几十或几百条语句。高级语言分为 “面向过程” 和 “面向对象” 两种。现在，程序员几乎都使用高级语言来编写程序，但最终都要将其转换成机器语言来执行。转换方式有两种：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现语言时有两种方式：</p><pre class="line-numbers language-none"><code class="language-none">编译（翻译）（complier）：将高级语言程序转换成机器级目标程序。执行时启动目标程序即可。解释（interpreter）：将高级语言语句逐条实时译码为低级语言指令，不生成目标文件。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>用高级语言开发程序需要复杂的支撑环境。包括：</p><pre class="line-numbers language-none"><code class="language-none">语言处理系统    语言处理程序（包括编写源程序的编译器，及处理源程序的翻译转换软件）    语言的运行时系统操作系统    人机接口：GUI 方式（图形用户界面）或 CUI 方式（命令行用户界面）    操作系统内核指令集体系结构：计算机硬件的抽象<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="CA1-3-计算机系统的层次结构"><a href="#CA1-3-计算机系统的层次结构" class="headerlink" title="CA1.3 计算机系统的层次结构"></a>CA1.3 计算机系统的层次结构</h3><p>计算机由 硬件、固件（微程序。放在只读存储器中，几乎不改变的程序）、软件组成。</p><p>从使用语言的角度，计算机系统可以被看成按功能划分的多层机器级组成的层次结构。</p><h4 id="计算机系统抽象层的转换"><a href="#计算机系统抽象层的转换" class="headerlink" title="#计算机系统抽象层的转换"></a>#计算机系统抽象层的转换</h4><p>计算机抽象层间，上层是下层的抽象，下层是上层的实现，底层为上层提供支撑环境。</p><p>用户提出的 问题 要转化成 算法，通过高级语言程序实现后得到 高级语言源程序。</p><p>高级语言源程序借由 操作系统 的支持被翻译成 指令集体系结构（ISA）规定的机器指令。</p><p>指令集体系结构是硬件层面的抽象，其具体实现实际上是 微体系结构 的实现。</p><pre class="line-numbers language-none"><code class="language-none">微程序：微程序由硬件直接执行。M0 由硬件实现。机器指令：用微指令程序解释机器指令。M1 由微程序（固件）实现。操作系统作业控制语言：一般用机器语言程序解释作业控制语句。M2 以上多由软件实现。汇编语言：汇编语言程序经汇编程序翻译成机器语言程序。高级语言：高级语言程序经过编译程序翻译成汇编语言程序，或某种中间语言程序，或机器语言程序。应用语言：应用语言程序经过应用程序包翻译成高级语言程序。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="计算机系统的不同用户"><a href="#计算机系统的不同用户" class="headerlink" title="#计算机系统的不同用户"></a>#计算机系统的不同用户</h4><p>最终用户：工作在由应用程序提供的最上层的抽象层</p><p>系统管理员：工作在由操作系统提供的抽象层</p><p>应用程序员：工作在语言处理系统（主要是编译器和汇编器）的抽象层。语言处理系统建立在操作系统之上。<br>编译器、汇编器的目标程序由机器级代码组成，操作系统指令直接对硬件进行编程控制</p><p>系统程序员：工作在 ISA 层次，必须对 ISA 非常了解。ISA 处于软件和硬件的交界面，是对硬件的抽象。<br>软件的所有功能都建立在 ISA 的基础上。ISA 是最重要的层次</p><h4 id="指令集体系结构-ISA"><a href="#指令集体系结构-ISA" class="headerlink" title="#指令集体系结构 ISA"></a>#指令集体系结构 ISA</h4><pre class="line-numbers language-none"><code class="language-none">指令集体系结构（ISA，Instruction Set Architecture），简称指令系统<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>ISA 是一种规约，规定了如何使用硬件：</p><pre class="line-numbers language-none"><code class="language-none">可执行的指令和集合，包括 指令格式、操作种类 以及每种操作对应的 操作数的规定指令可以接受的 操作数的类型操作数能存放的寄存器组的结构，包括 每个寄存器的名称、编号、长度、用途操作数能存放的 存储空间的大小 和 编址方式操作数在存储空间存放时 按照大端还是小端方式存放指令获取操作数的方式，即 寻址方式指令执行过程的控制方式，包括 程序计数器（PC）、条件码定义等<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ISA 在通用计算机系统中是必不可少的一个抽象层。</p><p>不同的 ISA 规定的指令集不同，如 IA-32、MIPS、ARM 等。</p><p>计算机的硬件组成称为 微体系结构。计算机组成必须能实现 ISA 规定的功能，同一种 ISA 可以由不同计算机组成。</p><h3 id="CA1-4-计算机系统结构、组成、实现"><a href="#CA1-4-计算机系统结构、组成、实现" class="headerlink" title="CA1.4 计算机系统结构、组成、实现"></a>CA1.4 计算机系统结构、组成、实现</h3><p>计算机系统设计的主要内容就是计算机 系统结构、组成、实现 的设计。</p><p>计算机系统结构：指是传统机器语言级的体系结构。它是软件与硬件&#x2F;固件的交界面，<br>是机器语言程序员看到的机器物理系统的抽象。计算机系统结构研究软硬件间的功能分配，确定传统机器级的界面。</p><p>计算机组成：指计算机系统结构的逻辑实现。包括机器级内部的数据流和控制流的组成，<br>以及逻辑设计等。其着眼于物理机器级内各事件的排序方式与控制方式、各功能部件及部件间的联系。</p><p>计算机实现：指计算机组成的物理实现，包括处理机、主存等部件的物理结构，<br>部件集成度，模块、插件、底板的划分与连接，信号传输，电源，冷却，整机装配技术等。其着眼于器件技术（主导）、微组装技术。</p><p>相同的系统结构可能有不同的组成，一种计算机组成可以有多种实现。<br>此外，不同的系统架构会让计算机组成产生差异，计算机组成也会对计算机实现产生影响。</p><h3 id="CA1-5-软件发展对系统架构的影响"><a href="#CA1-5-软件发展对系统架构的影响" class="headerlink" title="CA1.5 软件发展对系统架构的影响"></a>CA1.5 软件发展对系统架构的影响</h3><p>软件的可移植性：一个软件能不经修改或只需少量修改，即能由一台计算机移植到另一计算机上正确运行。</p><p>软件的兼容性分为四种情况：向上（机器档次更高）兼容、向下（机器档次更低）兼容、向前（发布时间靠前）兼容、向后（发布时间靠后）兼容。<br>向后兼容是程序设计的基本要求。</p><p>实现可移植性的办法有以下几种：</p><pre class="line-numbers language-none"><code class="language-none">采用系列机系列机：由同一厂家生产的，具有相同系统结构，但具有不同组成和实现的一系列不同型号机器。模拟和仿真模拟：用软件的方法在一台机器（宿主机）上实现另一机器（虚拟机）的指令集仿真：用一台机器（宿主机）上的微程序去解释实现另一条机器（虚拟机）的指令集统一高级语言<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不同的应用对计算机系统结构设计提出了不同要求。应用需求是促使计算机系统结构发展的根本动力。</p><p>摩尔定律：集成电路芯片上集成的晶体管数目每隔 18 个月就翻一番。</p><h3 id="CA1-6-系统结构的并行性"><a href="#CA1-6-系统结构的并行性" class="headerlink" title="CA1.6 系统结构的并行性"></a>CA1.6 系统结构的并行性</h3><p>并行性包括同时性和并发性两重含义：</p><pre class="line-numbers language-none"><code class="language-none">同时性：两个以上事件在同一时刻发生并发性：两个以上事件在同一时间段内发生<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>从计算机系统执行程序的角度看，并行性等级由低到高分为几级：</p><pre class="line-numbers language-none"><code class="language-none">指令内部并行：一条指令内部各个微操作间的并行执行指令级并行：多条指令并行执行线程级并行：并行执行多个线程。通常是一个进程内派生的多个线程任务级或过程级并行：多个任务或程序段的并行执行作业或程序级并行：多个作业或多道程序的并行执行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从处理数据角度看的分类方法（冯氏分类法），由低到高分为四级：</p><pre class="line-numbers language-none"><code class="language-none">位串字串：同时对一个字的一位进行处理位并字串：同时对一个字的全部位进行处理位串字并：同时对许多字的同一位（位片）进行处理全并行：同时对多个字的全部或部分位阻进行处理<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>从计算机信息加工步骤的角度看，并行等级又分为：</p><pre class="line-numbers language-none"><code class="language-none">存储器操作并行：以单体单字、多体单字、多体多字方式在一个周期内访问多个字处理器操作步骤并行：指令的取指、分析、执行等操作步骤在时间上重叠流水地进行处理器操作并行：重复设置大量处理单元，让他们在同一控制器控制下按同一指令同时工作指令、任务、作业并行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>提高并行性的技术途径：</p><pre class="line-numbers language-none"><code class="language-none">时间重叠：让多个处理过程在事件上错开，轮流重叠使用一套硬件的各个部分资源重复：以数量取胜，重复设置硬件资源资源共享：一种软件方法。多个任务按一定时间顺序轮流使用同一资源多倍性：在系统受限的部件上，同时处于统一执行阶段的指令或数据的最大数目<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>按照指令流与数据流的多倍性，能将计算机进行分类：</p><pre class="line-numbers language-none"><code class="language-none">单指令流单数据流（SISD）单指令流多数据流（SIMD）多指令流单数据流（MISD）多指令流多数据流（MIMD）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="CA1-7-计算机系统的软硬件取舍"><a href="#CA1-7-计算机系统的软硬件取舍" class="headerlink" title="CA1.7 计算机系统的软硬件取舍"></a>CA1.7 计算机系统的软硬件取舍</h3><p>计算机系统软硬件取舍的基本原则：</p><pre class="line-numbers language-none"><code class="language-none">在现有硬件、器件条件下，从实现费用、速度和其他性能要求综合考虑，获取高性价比考虑到准备采用和可能采用的组成技术，使之尽可能不过多或不合理地限制各种组成、实现技术的采用不仅从硬件角度考虑如何便于应用组成技术和发挥期间技术的进展，还要从软件角度考虑编译与操作系统的实现，并把对高级语言程序提供更多更好的支持放在首位<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><!-- ![标题](/themes/hexo-theme-cola/source/imgs/log/软硬.jpeg) -->]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;CA1-概论&quot;&gt;&lt;a href=&quot;#CA1-概论&quot; class=&quot;headerlink&quot; title=&quot;CA1 概论&quot;&gt;&lt;/a&gt;CA1 概论&lt;/h2&gt;&lt;h3 id=&quot;CA1-1-计算机的结构&quot;&gt;&lt;a href=&quot;#CA1-1-计算机的结构&quot; class=&quot;head</summary>
      
    
    
    
    <category term="计算机" scheme="http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>小张杂记（初测）</title>
    <link href="http://example.com/2023/08/03/%E7%AC%91%E8%B0%88/"/>
    <id>http://example.com/2023/08/03/%E7%AC%91%E8%B0%88/</id>
    <published>2023-08-03T05:23:11.041Z</published>
    <updated>2023-08-29T07:49:35.041Z</updated>
    
    <content type="html"><![CDATA[<p>本文纯属自己的闲谈杂记，如有无趣请自行离开！！！</p><h2 id="自创小诗"><a href="#自创小诗" class="headerlink" title="自创小诗"></a>自创小诗</h2><h3 id="云野（阿小张）"><a href="#云野（阿小张）" class="headerlink" title="云野（阿小张）"></a>云野（阿小张）</h3><pre class="line-numbers language-none"><code class="language-none">浮空目心切，游若似海千。孤屿野长鹤，隐入坠群阁。路远水穷尽，岂云皎如雪。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="妄长生"><a href="#妄长生" class="headerlink" title="妄长生"></a>妄长生</h2><h3 id="曲目一"><a href="#曲目一" class="headerlink" title="曲目一"></a>曲目一</h3><p>长生，千古不变的话题，这样作为开头确实有点老旧，但确实很难理解。<br>不同的人对长生有不同的理解和追求，从某种意义上，长生……千万年亿万年的不死是长生，刹那间的永恒亦是长生。<br>或者<br>更是一种追求的目标，通过各种形式将自己的精神和基因延续。<br>达到长生，到底只是一种妄图虚无的追求，有些人为了长生，囚禁所谓的灵魂达到另一层面的精神永恒。<br>而对于我仅仅是一种态度，本能追求的态度。</p><h2 id="谈趣事"><a href="#谈趣事" class="headerlink" title="谈趣事"></a>谈趣事</h2><h3 id="后悔的赌徒"><a href="#后悔的赌徒" class="headerlink" title="后悔的赌徒"></a>后悔的赌徒</h3><p>想知道一个人重新改邪归正的途径吗，那就是坠入无尽的黑暗，然后再给他光明；<br>如若此也不能令他变得坦坦荡荡，那么将无药可救，世界充满宽容和爱，<br>但尽然有很多事情都无法弥补，你要记住没有人会一直给你重新做人的机会，<br>即使是你自己也绝不容许。<br>    2021年的夏天，我在朋友的招呼下一个人去了武汉打工，<br>刚开始拿着家里的流动资金四处找工作，大概用了两天时间最后找到应聘地点，<br>三餐包吃，并且包住，只可惜我已经有了住的地方，我跟那个朋友玩的不错，<br>但也就是这个时候我陷入泥潭，我充满好奇的打开一个网站，<br>可能我第一时间意识到了这是一个赌博网站，但我却没有直接离开，而是打开浏览其中，<br>这无疑是一个巨大的陷阱。虽然我第一时间并没有使用吗，却在今后的一个月沉迷其中，<br>刚开始的甜头无疑令我沾沾自喜，有钱不赚是傻子的心理催使着我前进，最终的结果以绝望呐喊而结束，<br>    亲人成为我最后的救命稻草，不仅仅是第一次的经历，也成为我最后一次的体验。<br>世界上没有人会无缘无故对你好，除了利益的诱骗。</p><h3 id="沉陷的光辉"><a href="#沉陷的光辉" class="headerlink" title="沉陷的光辉"></a>沉陷的光辉</h3><p>故事要从2022年九月份说起，那个时候我刚去实习，在一家工厂里，日日夜夜的工作使我疲倦了生活，<br>萎靡不振的精神使我从来没有考虑过以后，渐渐入泥潭不知该当何处。<br>但后来遇到了胡，她的出现使我的眼前出现了一束光。</p><h2 id="谈心事"><a href="#谈心事" class="headerlink" title="谈心事"></a>谈心事</h2><h3 id="零碎的片刻"><a href="#零碎的片刻" class="headerlink" title="零碎的片刻"></a>零碎的片刻</h3><p>我不知道为什么我的身边总是有哪些琐碎而又繁杂的事情发生，虽然都没有身临其境过，<br>但他们的那些身处悲伤或抑郁的事件都能深深的渲染这我，替他们伤心，替他们难过，<br>他们要么是我的家人，或是朋友，亦是同学，甚是恋人。<br>但我没有任何办法……<br>这才是最……</p><h3 id="转瞬的心动"><a href="#转瞬的心动" class="headerlink" title="转瞬的心动"></a>转瞬的心动</h3><p>一眼心动是她<br>    有时候并不是自己能控制住的，我尝试去摆脱那份情感，<br>可心里的那头猛兽如出笼般洪流，抵挡不住，不断收缩，不断膨胀。<br>眼神令人从容，忍不住多看几眼，如同明月般清澈，直勾勾的注视忽视了礼貌。<br>行为艺术的感性，与更多的人打交道就会发现自己只是害怕，不敢与之交往。<br>不可避免的追击，难以置信的选择都只是人的无奈经历。<br>沉默总是不可避免的，但我的选择是绝对成功的，我对你的心挽回不来。<br>—bxy<br>    是新鲜感吗，还是喜欢？还是爱？<br>可能吧，都不算，只是我一个人在白日做梦。</p><h3 id="天真的童趣"><a href="#天真的童趣" class="headerlink" title="天真的童趣"></a>天真的童趣</h3><p>论初恋的开始<br>    那是一个中午，一群小学生到其中一个人家里做客，可那个小学生却惹的一个女同学哭了，我不知道他们在讲什么，<br>过了好一会，那群小学生渐渐离场，只剩下那名小学生留在原地发呆，可能他也认识到自己的错误，随后抽泣起来。<br>只剩下那句“你从我家里离开”这句话放到现依旧刺骨，是那么疼骨铭心，可那名女生却不会这么想。<br>那名女生可能已经忘记了这件事情，但我可不那么觉得，这件事情伴随着我的一身，久久不能忘怀。<br>即使本人已经忘了这一切，但我也曾经喜欢过她啊！<br>过程真的很快乐，那段时间是我在毕业前最幸福的时光，太多回忆和交流，使那暗淡的生活中多了一束光，着该如何陪伴的同时，可曾想那也是救赎我的一种方式。<br>可惜，最后的放声嘶吼注定了结局是悄然退场。</p><h3 id><a href="#" class="headerlink" title></a></h3><p>感叹一段充满奇妙色彩的时间，在那里能遇到了数不清的人和事，有争吵的拉帮结派，有瞬息万变的学无止境，有特立独行的</p><h2 id="谈梦事"><a href="#谈梦事" class="headerlink" title="谈梦事"></a>谈梦事</h2><h3 id="无奈的列车"><a href="#无奈的列车" class="headerlink" title="无奈的列车"></a>无奈的列车</h3><p>去看外面世界到底多大，我会等一场雨有多大，把往外面都一次冲刷。<br>昨天做了一场梦，我梦见：<br>    一个人下了火车，不知何时村里都通了火车，我拿着包和被子往村子里走，在我印象中这就是我的村子，<br>但铺面而来的却是浓浓的烟尘，走在路边的小孩也注意到了我…好像..这几个小孩是刚刚一起从火车上下来的，<br>忽然一声叫喊打乱了我的思绪，哥哥，你怎么不穿鞋啊，这时的我才注意到我光着脚，却没有一点感觉。<br>    那个孩子一直跟着我，直到走到一处阁楼，很像我小时村里的一个商铺，那里门开着，<br>不知觉有股力量推着我走到里面去，告诉我那就是我的家，虽然我的心里不这么想，但还是…<br>突然想到那个男孩…嗯？什么男孩，转头发现还是那个男孩，紧紧跟在我身后，我揉了揉眼睛，女孩？？？我顿时感觉到不可思议，这时我发现脚底有什么液体黏糊糊的……<br>（这是…血液的流淌，整片天空都变得血腥，周围的人群用着诡异的眼神看着我）突然一声叫喊惊醒了我<br>（hi，力恒，回来也不打声招呼啊，还是听别人说你回来了，害我找了半天）<br>这时刚刚那种令人寒意才悄然消失，片久我突然意识到，那种感觉太真实了，但愿都只是梦……<br>    梦里的都是不愿意想起的回忆，或是难以接受的一切，可能也是映射现实的写照，<br>那天我们一家人坐上了去往他乡的旅途，二爷变得诡异，慌张的情绪表现的淋漓尽致，<br>他拖着我的弟弟，一把接过去的邻居家哥哥，显得我是如此多余又…刺激,！！！梦幻般的驾驶技术，开局就是王炸，车速已经超过240码，堪比高铁的时速已经感受不到周围的变化，转眼即逝的人群和房屋在</p><h2 id="谈异事"><a href="#谈异事" class="headerlink" title="谈异事"></a>谈异事</h2><h3 id="无声的反抗"><a href="#无声的反抗" class="headerlink" title="无声的反抗"></a>无声的反抗</h3><p>眼花缭乱的烟火、拥挤的人流和喋喋不休的言谈举止，即使校园内如此热闹的景象也阻止不了我们老师拖堂的脚步，<br>同学们都被这一股毅力所感染，竟没一人做出反抗，或许这就是同学们热爱这一间教室和这一位老师的原因吧（苦笑）<br>酣睡的想象里我逃出了这里，走在那一条视乎没有边界的走廊。</p><h3 id="无畏的星火"><a href="#无畏的星火" class="headerlink" title="无畏的星火"></a>无畏的星火</h3><p>童话在梦里<br>    我不屑在这世间篝火，那点点烛光瞬而忽灭瞬而燃起<br>如同那飞蛾般点缀这遥不可及的你……<br>能选择什么的，我不清楚我到底熟知这否一切，找到你的线索却又不敢见到你，或许只是我的一厢情愿罢了，但我此时的心里却热血沸腾的想着你，心心念念，重梦幻想，难道</p><h3 id="沉迷的魅色"><a href="#沉迷的魅色" class="headerlink" title="沉迷的魅色"></a>沉迷的魅色</h3><p>沉迷色字当空的男人走不远，无法直视面对自己的身体，眼看着一天不如一天，但却不做任何努力或改变，想象中的场景步步紧逼，那道谚语怎么讲的，“竹篮打水一场空”怕就是这么个道理吧</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文纯属自己的闲谈杂记，如有无趣请自行离开！！！&lt;/p&gt;
&lt;h2 id=&quot;自创小诗&quot;&gt;&lt;a href=&quot;#自创小诗&quot; class=&quot;headerlink&quot; title=&quot;自创小诗&quot;&gt;&lt;/a&gt;自创小诗&lt;/h2&gt;&lt;h3 id=&quot;云野（阿小张）&quot;&gt;&lt;a href=&quot;#云野（阿小张</summary>
      
    
    
    
    <category term="日记" scheme="http://example.com/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
    <category term="杂记" scheme="http://example.com/tags/%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>&lt;没用的小知识&gt;</title>
    <link href="http://example.com/2023/08/03/%E6%B2%A1%E7%94%A8%E7%9A%84%E5%B0%8F%E7%9F%A5%E8%AF%86/"/>
    <id>http://example.com/2023/08/03/%E6%B2%A1%E7%94%A8%E7%9A%84%E5%B0%8F%E7%9F%A5%E8%AF%86/</id>
    <published>2023-08-03T05:23:10.027Z</published>
    <updated>2023-08-14T07:15:31.331Z</updated>
    
    <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">相对路径（一层层查找）和绝对路径（直接从根目录开始）---重点tree c:<span class="token punctuation">\</span>--文件展示cls：清屏ctrl+c：暂停运行md：创建文件rd：删除文件<span class="token builtin class-name">echo</span> hello <span class="token operator">></span> ok.txt：创建文本内容（hello为nul表空值）del abc.txt删除文本copy：拷贝文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>基本数据类型</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">基本数据类型<span class="token punctuation">&#123;</span>数值型<span class="token punctuation">&#123;</span>整数类型：byte【1】short【2】         int【4】long【8】浮点（小数）类型：float【4】double【8】（在java中浮点数默认double类型）<span class="token punctuation">&#125;</span>字符型：char【2】存放单个字符<span class="token string">'a'</span>，       String存放多字符<span class="token string">"abc"</span>布尔型：boolean【1】存放true，false（boolean不参与类型的转换）<span class="token punctuation">&#125;</span>引用数据类型<span class="token punctuation">&#123;</span>类：class；接口：interface；数组：<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>进制口诀</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ob二进制，0八进制，0x十六进制转十进制8421规则十转二除二倒余十转八除八倒余十转十六除十六倒余二转八，从低位开始，将二进制数每三个一组，转成对应八进制即可<span class="token punctuation">(</span><span class="token number">8421</span>规则<span class="token punctuation">)</span>ob11<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>010<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token number">101</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span>0325二转十六，从低位开始，将二进制数每四 个一组，转成对应十六进制即可<span class="token punctuation">(</span><span class="token number">8421</span>规则<span class="token punctuation">)</span>ob1101<span class="token punctuation">(</span>D<span class="token punctuation">)</span>0101<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span>0xD5八转二<span class="token punctuation">(</span><span class="token string">"/"</span>是为了方便观看，实际没有<span class="token punctuation">)</span><span class="token assign-left variable">0237</span><span class="token operator">=</span><span class="token operator">></span>ob010/011/111十六转二<span class="token assign-left variable">0x23B</span><span class="token operator">=</span><span class="token operator">></span>ob0010/0011/1011<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;相对路径（一层层查找）和绝对路径（直接从根目录开始）---重点
tree c:&lt;span class=</summary>
      
    
    
    
    <category term="计算机" scheme="http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>&lt;如何搭建hexo博客&gt;</title>
    <link href="http://example.com/2023/08/03/hexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
    <id>http://example.com/2023/08/03/hexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/</id>
    <published>2023-08-03T05:23:09.278Z</published>
    <updated>2023-09-01T08:39:27.094Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录-96-96-96"><a href="#目录-96-96-96" class="headerlink" title="目录&#96;&#96;&#96;"></a>目录&#96;&#96;&#96;</h1><p>环境准备<br>——安装git<br>——安装Node.js<br>安装Hexo博客框架<br>使用Hexo搭建博客（本地启动）<br>部署到（Github）上公开使用</p><h2 id="序幕一"><a href="#序幕一" class="headerlink" title="序幕一"></a>序幕一</h2><p>git和node.js的环境搭建大家在网络上找一下就好了，很多博主都讲的很棒的，我这里主要讲的是hexo的安装到使用</p><h2 id="序幕二"><a href="#序幕二" class="headerlink" title="序幕二"></a>序幕二</h2><p>1.先创建一个github账号（<a href="http://github.com)/">http://github.com）</a><br>因为不是国内网站，有些小伙伴可能出现打不开网站的情况，这个时候需要一些外力的加持，我使用的是watt toolkit（以前叫steam++）和clash这两款加速器。<br>2.再创建一个库，库名必须跟你的github用户名一模一样（“用户名”.github.io）<br>初始化仓库选择“README”文件</p><h2 id="序幕三"><a href="#序幕三" class="headerlink" title="序幕三"></a>序幕三</h2><p>1.下载【hexo-script】的安装脚本</p><pre class="line-numbers language-none"><code class="language-none">curl -0 https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;kjhuanhao&#x2F;hexo-scriptamaster&#x2F;install.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="终幕"><a href="#终幕" class="headerlink" title="终幕"></a>终幕</h2><p>非常无语，图片怎么都插入不了，耽误我的教人子弟的方法<br>我想应该是主题的原因，所以我又创建一个博客</p><p>如果你也出现图片插入不了的情况我只能推荐去看看哔哩哔哩的某up主<br>【hexo搭建个人博客超简单效果超好的个人网站博客搭建对小白很友好】<br><a href="https://www.bilibili.com/video/BV1Rt4y1k7it?vd_source=8ad87d7d4b8fd9ae19dbb38da5f2e85f">https://www.bilibili.com/video/BV1Rt4y1k7it?vd_source=8ad87d7d4b8fd9ae19dbb38da5f2e85f</a><br>毕竟我就是看这个up搭建的，实属良心</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;目录-96-96-96&quot;&gt;&lt;a href=&quot;#目录-96-96-96&quot; class=&quot;headerlink&quot; title=&quot;目录&amp;#96;&amp;#96;&amp;#96;&quot;&gt;&lt;/a&gt;目录&amp;#96;&amp;#96;&amp;#96;&lt;/h1&gt;&lt;p&gt;环境准备&lt;br&gt;——安装git&lt;br&gt;——安</summary>
      
    
    
    
    <category term="Hexo" scheme="http://example.com/categories/Hexo/"/>
    
    
    <category term="Nodejs+git" scheme="http://example.com/tags/Nodejs-git/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2023/07/05/%E6%B5%8B%E8%AF%95/"/>
    <id>http://example.com/2023/07/05/%E6%B5%8B%E8%AF%95/</id>
    <published>2023-07-05T14:59:31.000Z</published>
    <updated>2023-08-14T09:47:10.717Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>英语笔记</title>
    <link href="http://example.com/2023/06/12/%E8%8B%B1%E8%AF%AD%E6%96%87%E6%9C%AC/"/>
    <id>http://example.com/2023/06/12/%E8%8B%B1%E8%AF%AD%E6%96%87%E6%9C%AC/</id>
    <published>2023-06-12T14:45:55.000Z</published>
    <updated>2023-08-29T07:49:53.663Z</updated>
    
    <content type="html"><![CDATA[<h2 id="五种基本句型"><a href="#五种基本句型" class="headerlink" title="五种基本句型:"></a>五种基本句型:</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">1</span>.主+谓                I go.（主谓结构里的动词，一定是不及物动词）I come.<span class="token number">2</span>.主+系+表             I am a teacher.<span class="token number">3</span>.主+谓+宾             I love interesting books.<span class="token number">4</span>.主+谓+间接宾语（表人）+直接宾语（表物）      I give him a book.主谓人物（人物无关系）<span class="token number">5</span>.主+谓+宾语补足语                           I call him jim.主谓人物（人物有关系）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第一课-必考常识"><a href="#第一课-必考常识" class="headerlink" title="第一课 必考常识"></a>第一课 必考常识</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">词法：be 形中有副，（形容词 +ly <span class="token operator">=</span>副词）冠形后有名，（可数名词单数不能裸奔） 冠名中有形，（行<span class="token operator">=</span>  名词 +  尾缀） 动介后用宾，（宾格，反身代词，ing）Yesterday ，it rained<span class="token punctuation">(</span>动词<span class="token punctuation">)</span> heavily<span class="token punctuation">(</span>副词：修饰动词<span class="token punctuation">)</span>. I was __badly__<span class="token punctuation">(</span>bad<span class="token punctuation">)</span> ill.I love delicious __apples__<span class="token punctuation">(</span>apple<span class="token punctuation">)</span>love an __interesting__<span class="token punctuation">(</span>interest<span class="token punctuation">)</span> book.句法：名后有句且不完整是定从动后有句是宾从逗隔有连是状从时态和语态：未作，目的用to <span class="token keyword">do</span>主伴doing，被伴dome完成被动记心上<span class="token number">1</span>.名词：名称（人名、地名、职业、服装、生物、等一切人、事、物的名称）可做主语或宾语<span class="token number">2</span>.冠词：a/an/the，名词前面的小帽子，不能独立使用<span class="token number">3</span>.代词：起到代替作用的词（可代替名词、动词、形容词、数量词、副词）                        （代词出现的句子一定是答案）          ****          代替人：人称代词（I/we/you/he/she/it/they  /me/us/you/him/her/it/item<span class="token punctuation">)</span>  主格 作主语 开头          宾格 作宾语 介,动后          代替物：形容词性物主代词（my/our/your/his/her/its/their）  位于名词之前且表示物品的归属          名词性物主代词（mine/ours/yours/his/hers/its/theirs）二合一：形代+名词          ***                        名词性物主代词之后禁止再出现名词 注：背单词不可怕，知道位置，判断词性，辨析词义         必须：人称代词的分类，背会，并默写，学到手，讲出口！！！代替人、事、物本身：反身代词：  my/self我自己                our/selves我们自己                  your/self你自己                  your/selves你们自己                  him/self他自己                  her/self她自己it/self它自己                  them/selves他们自己   ******         反身代词是宾格的进化，用法是：主语和宾格是同一个人，则宾格一定要写成反身代词            不定代词：代替不同数量人、物both/2/2neither/0/2either/1/2all/3/3none/0/3much/不可数，很，很多many/可复数，很多例：I love <span class="token number">2</span> borthers Both are teacher.我有两个兄弟都是老师I love <span class="token number">5</span> borthers All <span class="token punctuation">(</span>三者以上用all<span class="token punctuation">)</span>are teacheri love <span class="token number">2</span> borthers either is a teacher我有两个兄弟其中一个是教师其他代词：指定代词（this/that/      these/those（要跟复数名词））有远近之分，有单复数之分                  这个/那个/       这些/那些                表近处/表远处/     这些个/那些个疑问代词：形容词：修饰名词、代词，表示人或事物的性质、状态、特征或属性<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;五种基本句型&quot;&gt;&lt;a href=&quot;#五种基本句型&quot; class=&quot;headerlink&quot; title=&quot;五种基本句型:&quot;&gt;&lt;/a&gt;五种基本句型:&lt;/h2&gt;&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;</summary>
      
    
    
    
    <category term="升本" scheme="http://example.com/categories/%E5%8D%87%E6%9C%AC/"/>
    
    
    <category term="英语" scheme="http://example.com/tags/%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>侃侃而谈</title>
    <link href="http://example.com/2020/05/05/%E6%9B%BE%E4%B8%8D%E6%83%B3/"/>
    <id>http://example.com/2020/05/05/%E6%9B%BE%E4%B8%8D%E6%83%B3/</id>
    <published>2020-05-05T03:23:56.000Z</published>
    <updated>2023-08-29T07:44:07.687Z</updated>
    
    <content type="html"><![CDATA[<p>来源于2019年11月4号那时刚开始认识的你</p><h2 id="我喜欢你"><a href="#我喜欢你" class="headerlink" title="我喜欢你"></a>我喜欢你</h2><p>我不知道该用什么来做为此封信的开头，不知道为什么要这样去写，我也不知道写到怎样是个头，喜欢的看不见摸不着，甚至连声音也听不到，即使如此我也没有放弃过对你的希望，因为我觉得世间充满着包容，你肯定是有你的难处，比如工作忙吧。<br>我们都是学生，不同的只是我是一名大一学生，而你却已经是一名大三学姐，这样说应该也没差吧。我们的生活状态不一样，这是很好理解的。</p><p>不知道已经过去了多久，在此之前我有过两次经历，第一次大概是初中的时候吧，第一次更准确的说应该是玩闹，那时是她朝我走来我却没有把握住，可能那个时候的我还没有“爱”与“宽容”这个概念，最后我很绝情的跟她分手了，原因是嫌她太烦了；话说这也是报应，高中时让我认识到一个令我一见钟情的女孩子，三番五次去表白，结果很令人遗憾从未成功过，最开始她给我的答复是还没从上次的阴影中走出来，然而到了第三年的原因就是莫名其妙告诉我她已经有男朋友了，还是我身边的一个人，我也不知道这是造化弄人还是冥冥之中。<br>直到毕业-报选志愿-通知书，我一个人来到一个陌生的城市，来到了大襄阳，这里没有认识的亲人·朋友·老师·同学，仅仅有的是重新开始的生活和学习。刚开始我是非常抱怨之前跟我一起填志愿的那群伙伴们，凭什么都是第一志愿为什么偏偏就选中了我一个人，为什么呢？但随着时间的推移我也就慢慢的接受了。我不知道该找谁去诉说这些埋藏心里的话，我很苦恼。<br>于是我遇见了你，我喜欢的人，我的宝贝，这次我是无论如何都不会选择放手，尽管你非常的忙，总是没时间回复我的消息，总是答非所问，不愿意跟我分享自己的生活，似乎就像是在玩捉迷藏般，但我都不介意，因为爱一个人就是要互相宽容的，对吧。<br>（但如果你对我已经没感觉的话，请及时提出来，对你我都好）<br>谈不上非常喜欢，也谈不上非常爱，只是我的生活已经缺你不可，一直都在想你。<br>我多么想去拥抱你，可惜山南水北，连抱你的机会都没有！</p><p>首先我在这里祝愿我的小猪猪身体健康，每天快快乐乐的，然后是工作顺利得到领导提拔升职赚大钱。<br>礼物嘛，都只是一些日用品和零食，其实还有两件礼物的，但允许我私自将其改发到5月20号。<br>写这封信的时候已经是5月5号，正好这天立夏，你说过你喜欢在夏天吃杨梅，我明白；你每天起早贪黑的，我看着心疼啊，希望那几袋面包能减轻你早起的饥饿，而那些睡眠眼罩希望能带给你晚睡的安眠；你经常告诉我你手机忘了充电，我也是没想到你这样忘事biganz</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;来源于2019年11月4号那时刚开始认识的你&lt;/p&gt;
&lt;h2 id=&quot;我喜欢你&quot;&gt;&lt;a href=&quot;#我喜欢你&quot; class=&quot;headerlink&quot; title=&quot;我喜欢你&quot;&gt;&lt;/a&gt;我喜欢你&lt;/h2&gt;&lt;p&gt;我不知道该用什么来做为此封信的开头，不知道为什么要这样去写，我也</summary>
      
    
    
    
    <category term="日记" scheme="http://example.com/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
    <category term="杂记" scheme="http://example.com/tags/%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
</feed>
